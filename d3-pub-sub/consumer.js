const amqp = require('amqplib');

const amqpServerURL = 'amqp://localhost:5672';
const exchangeName = 'broadcast_logs';

const init = async () => {
  try {
    const connection = await amqp.connect(amqpServerURL);
    const channel = await connection.createChannel();

    await channel.assertExchange(exchangeName, 'fanout', {
      durable: false,
    });

    /**
     * We passed queue name as an empty string, that will create a non-durable queue with random queue name generated by RabbitMQ
     * exclusive: true (used by only one connection and the queue will be deleted when that connection closes)
     */
    const tempQueue = await channel.assertQueue('', {
      exclusive: true,
    });

    console.log(
      `Waiting for messages in ${tempQueue.queue}. To exit press CTRL+C`
    );

    /**
     * bindQueue(queue, source, pattern, [args])
     * Assert a routing path from an exchange to a queue.
     */
    await channel.bindQueue(tempQueue.queue, exchangeName, '');

    channel.consume(
      tempQueue.queue,
      (msg) => {
        if (msg.content) {
          console.log(`Received job with message ${msg.content.toString()}`);
        }
      },
      {
        noAck: true,
      }
    );
  } catch (error) {
    console.error(error);
  }
};

init();
